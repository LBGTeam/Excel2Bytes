from CSScriptBuilder import CSScriptBuilder
from GlobalUtil import TableResLoadAssembly, TableLoadAssembly, TableStructAssembly
from ExcelUtil import GetCShapeType, OfferMap, SizeMap, typeMap, GetDataProperty, GetTypeRead, GetDataAssignment


def FieldExcelScript(scriptName, secValueType, bytesName, scriptBuilder):
    # 将数据转换为二进制
    Scripts = CSScriptBuilder()
    Scripts.AppendUsing('System.Collections.Generic')
    Scripts.AppendUsing('System.IO')
    Scripts.AppendUsing('System.Text')
    Scripts.AppendUsing(TableResLoadAssembly)
    Scripts.AppendUsing(TableLoadAssembly)
    Scripts.AppendEmptyLine()
    Scripts.BeginNamespace(TableStructAssembly)
    Scripts.BeginClass(scriptName, 'public sealed', 'ITable')
    Scripts.AppendEmptyLine()
    Scripts.AppendLine(f'private static {scriptName} s_Instance;')
    Scripts.AppendField('m_Cached', f'Dictionary<{OfferMap}, {GetCShapeType(secValueType)}>', 'private')
    Scripts.AppendField('reader', 'BinaryReader', 'private')
    Scripts.AppendEmptyLine()
    Scripts.AppendLine(f'public static {scriptName} Instance => s_Instance ??= new {scriptName}();')
    Scripts.AppendEmptyLine()
    Scripts.BeginConstructionMethod(scriptName, 'public')
    Scripts.AppendLine(f'TableManager.Add(this);')
    Scripts.AppendLine(f'm_Cached = new Dictionary<{OfferMap}, {GetCShapeType(secValueType)}>();')
    Scripts.AppendLine(f'//这里需要走自己资源加载字节文件')
    Scripts.AppendLine(f'reader = new BinaryReader(ResManager.OpenFile("{bytesName}.bytes"), Encoding.UTF8);')
    Scripts.EndMethod()
    Scripts.AppendEmptyLine()
    Scripts.BeginMethod('Dispose', 'public')
    Scripts.AppendLine(f'TableManager.Remove(this);')
    Scripts.AppendLine('m_Cached.Clear();')
    Scripts.AppendLine('reader.Close();')
    Scripts.EndMethod()
    Scripts.AppendEmptyLine()
    Scripts.BeginMethod('ReadData', 'public', GetCShapeType(secValueType), f'{OfferMap} offer')
    Scripts.BeginIf(f'm_Cached.TryGetValue(offer, out var value)')
    Scripts.AppendLine(f'return value;')
    Scripts.EndIf()
    Scripts.AppendLine('reader.BaseStream.Position = (long)offer;')
    GetDataAssignment(secValueType, 'value', Scripts)
    Scripts.AppendLine(f'm_Cached.Add(offer, value);')
    Scripts.AppendLine(f'return value;')
    Scripts.EndMethod()
    Scripts.AppendEmptyLine()
    Scripts.AppendEnter()
    for des in scriptBuilder:
        Scripts.Append(des)
    Scripts.AppendEmptyLine()
    Scripts.EndClass()
    Scripts.EndNamespace()
    Scripts.GenerateScript(scriptName)


def LNGExcelScript(scriptName, bytesName):
    # 将数据转换为二进制
    Scripts = CSScriptBuilder()
    Scripts.AppendUsing('System')
    Scripts.AppendUsing('System.Collections.Generic')
    Scripts.AppendUsing('System.IO')
    Scripts.AppendUsing('System.Text')
    Scripts.AppendUsing(TableResLoadAssembly)
    Scripts.AppendUsing(TableLoadAssembly)
    Scripts.AppendEmptyLine()
    Scripts.BeginNamespace(TableStructAssembly)
    Scripts.BeginClass(scriptName, 'public sealed', 'ITable')
    Scripts.AppendEmptyLine()
    Scripts.AppendLine(f'private static {scriptName} s_Instance;')
    Scripts.AppendField('m_Cached', f'Dictionary<uint, string>', 'private')
    Scripts.AppendField('m_Entries', f'Dictionary<uint, ulong>', 'private')
    Scripts.AppendField('reader', 'BinaryReader', 'private')
    Scripts.AppendEmptyLine()
    Scripts.AppendLine(f'public static {scriptName} Instance => s_Instance ??= new {scriptName}();')
    Scripts.AppendEmptyLine()
    Scripts.BeginConstructionMethod(scriptName, 'public')
    Scripts.AppendLine(f'TableManager.Add(this);')
    Scripts.AppendLine(f'm_Cached = new Dictionary<uint, string>();')
    Scripts.AppendLine(f'm_Entries = new Dictionary<uint, ulong>();')
    Scripts.AppendLine(f'//这里需要走自己资源加载字节文件')
    Scripts.AppendLine(f'reader = new BinaryReader(ResManager.OpenFile("{bytesName}.bytes"), Encoding.UTF8);')
    Scripts.AppendLine(f'ulong allOffset = 0;')
    Scripts.BeginWhile('true')
    Scripts.BeginTry()
    Scripts.AppendLine('var key = reader.ReadUInt32();')
    Scripts.BeginIf('key == 0')
    Scripts.AppendLine('break;')
    Scripts.EndIf()
    Scripts.AppendLine(f'var offset = reader.{GetTypeRead(SizeMap)}();')
    Scripts.AppendLine('m_Entries.Add(key, allOffset + 4);')
    Scripts.AppendLine(f'allOffset += 4 + {typeMap[SizeMap][1]} + (ulong)offset;')
    Scripts.AppendLine('reader.BaseStream.Position += offset;')
    Scripts.AppendLine('//判断是否读取完毕')
    Scripts.BeginIf('reader.BaseStream.Position >= reader.BaseStream.Length')
    Scripts.AppendLine('break;')
    Scripts.EndIf()
    Scripts.EndTry()
    Scripts.BeginCatch('Exception e')
    Scripts.AppendLine('reader.Close();')
    Scripts.AppendLine('break;')
    Scripts.EndCatch()
    Scripts.EndWhile()
    Scripts.EndMethod()
    Scripts.AppendEmptyLine()
    Scripts.BeginMethod('Dispose', 'public')
    Scripts.AppendLine(f'TableManager.Remove(this);')
    Scripts.AppendLine('m_Cached.Clear();')
    Scripts.AppendLine('reader.Close();')
    Scripts.EndMethod()
    Scripts.AppendEmptyLine()
    Scripts.BeginMethod('Find', 'public static', 'string', f'uint id, bool throwException = true')
    Scripts.BeginIf('id <= 0')
    Scripts.AppendLine(f'return string.Empty;')
    Scripts.EndIf()
    Scripts.BeginIf(f'Instance.m_Cached.TryGetValue(id, out var value)')
    Scripts.AppendLine(f'return value;')
    Scripts.EndIf()
    Scripts.BeginIf(f'Instance.m_Entries.TryGetValue(id, out var offset)')
    Scripts.AppendLine('Instance.reader.BaseStream.Position = (long)Instance.m_Entries[id];')
    Scripts.AppendLine(f'value = Instance.reader.ReadString();')
    Scripts.AppendLine('Instance.m_Cached.Add(id, value);')
    Scripts.AppendLine(f'return value;')
    Scripts.EndIf()
    Scripts.BeginIf('throwException')
    Scripts.AppendLine(f'throw new Exception($"Can not find {scriptName} id: {id}");')
    Scripts.EndIf()
    Scripts.AppendLine('return id.ToString();')
    Scripts.EndMethod()
    Scripts.AppendEmptyLine()
    Scripts.EndClass()
    Scripts.EndNamespace()
    Scripts.GenerateScript(scriptName)


def FindExcelScript(scriptName, pair, bytesName):
    # 将数据转换为二进制
    Scripts = CSScriptBuilder()
    Scripts.AppendUsing('System')
    Scripts.AppendUsing('System.Collections.Generic')
    Scripts.AppendUsing('System.IO')
    Scripts.AppendUsing('System.Text')
    Scripts.AppendUsing(TableResLoadAssembly)
    Scripts.AppendUsing(TableLoadAssembly)
    Scripts.AppendEmptyLine()
    Scripts.BeginNamespace(TableStructAssembly)
    Scripts.BeginClass(scriptName, 'public sealed', 'ITable')
    Scripts.AppendEmptyLine()
    Scripts.BeginClass('Data', 'public sealed')
    firstType = GetCShapeType(pair[0][1])
    firstName = pair[0][0]
    for field in pair:
        GetDataProperty(field[1], field[0], Scripts)
    Scripts.AppendEmptyLine()
    Scripts.BeginConstructionMethod('Data', 'public', f'BinaryReader reader, {GetCShapeType(firstType)} key')
    Scripts.AppendLine(f'{firstName} = key;')
    for field in pair[1:]:
        GetDataAssignment(field[1], field[0], Scripts, False)
    Scripts.EndClass()
    Scripts.EndClass()
    Scripts.AppendLine(f'private static {scriptName} s_Instance;')
    Scripts.AppendField('m_Cached', f'Dictionary<{firstType}, Data>', 'private')
    Scripts.AppendField('reader', 'BinaryReader', 'private')
    Scripts.AppendEmptyLine()
    Scripts.AppendLine(f'public static {scriptName} Instance => s_Instance ??= new {scriptName}();')
    Scripts.AppendEmptyLine()
    Scripts.BeginConstructionMethod(scriptName, 'public')
    Scripts.AppendLine(f'TableManager.Add(this);')
    Scripts.AppendLine(f'm_Cached = new Dictionary<{firstType}, Data>();')
    Scripts.AppendLine(f'//这里需要走自己资源加载字节文件')
    Scripts.AppendLine(f'reader = new BinaryReader(ResManager.OpenFile("{bytesName}.bytes"), Encoding.UTF8);')
    Scripts.EndMethod()
    Scripts.AppendEmptyLine()
    Scripts.BeginMethod('Dispose', 'public')
    Scripts.AppendLine(f'TableManager.Remove(this);')
    Scripts.AppendLine('m_Cached.Clear();')
    Scripts.AppendLine('reader.Close();')
    Scripts.EndMethod()
    Scripts.AppendEmptyLine()
    Scripts.BeginMethod('Find', 'public static', 'Data', f'{firstType} key, bool throwException = true')
    Scripts.AppendLine(f'return Instance.GetData(key, throwException);')
    Scripts.EndMethod()
    Scripts.AppendEmptyLine()
    Scripts.BeginMethod('GetData', 'public', 'Data', f'{firstType} key, bool throwException = true')
    Scripts.BeginIf(f'm_Cached.TryGetValue(key, out var value)')
    Scripts.AppendLine(f'return value;')
    Scripts.EndIf()
    Scripts.AppendLine('reader.BaseStream.Position = 0;')
    Scripts.BeginWhile('true')
    Scripts.AppendLine(f'var size = reader.{GetTypeRead(SizeMap)}();')
    Scripts.AppendLine(f'var id = reader.{GetTypeRead(firstType)}();')
    Scripts.BeginIf('id == key')
    Scripts.AppendLine(f'value = new Data(reader, key);')
    Scripts.AppendLine(f'm_Cached.Add(key, value);')
    Scripts.AppendLine('break;')
    Scripts.EndIf()
    Scripts.AppendLine(f'reader.BaseStream.Position += size - {typeMap[SizeMap][1]} - {typeMap[firstType][1]};')
    Scripts.AppendLine('//判断是否读取完毕')
    Scripts.BeginIf('reader.BaseStream.Position >= reader.BaseStream.Length')
    Scripts.AppendLine('break;')
    Scripts.EndIf()
    Scripts.EndWhile()
    Scripts.BeginIf('throwException && value == default')
    Scripts.AppendLine(f'throw new Exception($"Can not find {scriptName} key: {"{key}"}");')
    Scripts.EndIf()
    Scripts.AppendLine(f'return value;')
    Scripts.EndMethod()
    Scripts.EndClass()
    Scripts.EndNamespace()
    Scripts.GenerateScript(scriptName)


def CustomFieldExcelScript(scriptName, bytesName, scriptBuilder):
    # 将数据转换为二进制
    Scripts = CSScriptBuilder()
    Scripts.AppendUsing('System.Collections.Generic')
    Scripts.AppendUsing('System.IO')
    Scripts.AppendUsing('System.Text')
    Scripts.AppendUsing(TableResLoadAssembly)
    Scripts.AppendUsing(TableLoadAssembly)
    Scripts.AppendEmptyLine()
    Scripts.BeginNamespace(TableStructAssembly)
    Scripts.BeginClass(scriptName, 'public sealed', 'ITable')
    Scripts.AppendEmptyLine()
    Scripts.AppendLine(f'private static {scriptName} s_Instance;')
    Scripts.AppendField('reader', 'BinaryReader', 'private')
    Scripts.AppendEmptyLine()
    Scripts.AppendLine(f'public static {scriptName} Instance => s_Instance ??= new {scriptName}();')
    Scripts.AppendEmptyLine()
    Scripts.BeginConstructionMethod(scriptName, 'public')
    Scripts.AppendLine(f'TableManager.Add(this);')
    Scripts.AppendLine(f'//这里需要走自己资源加载字节文件')
    Scripts.AppendLine(f'reader = new BinaryReader(ResManager.OpenFile("{bytesName}.bytes"), Encoding.UTF8);')
    Scripts.AppendLine(f'InitData();')
    Scripts.EndMethod()
    Scripts.AppendEmptyLine()
    Scripts.BeginMethod('Dispose', 'public')
    Scripts.AppendLine(f'TableManager.Remove(this);')
    Scripts.AppendLine('reader.Close();')
    Scripts.EndMethod()
    Scripts.AppendEmptyLine()
    Scripts.AppendEnter()
    for des in scriptBuilder:
        Scripts.Append(des)
    Scripts.AppendEmptyLine()
    Scripts.EndClass()
    Scripts.EndNamespace()
    Scripts.GenerateScript(scriptName)
